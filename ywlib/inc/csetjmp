#pragma once
#include <inc/xmmintrin.h>

#define setjmp _setjmp

#ifndef __ywlib_import
#ifndef __ywlib_export
namespace std {
struct jmp_buf {
  uint64_t Frame;
  uint64_t Rbx;
  uint64_t Rsp;
  uint64_t Rbp;
  uint64_t Rsi;
  uint64_t Rdi;
  uint64_t R12;
  uint64_t R13;
  uint64_t R14;
  uint64_t R15;
  uint64_t Rip;
  uint32_t MxCsr;
  uint16_t FpCsr;
  uint16_t Spare;
  __m128 Xmm6;
  __m128 Xmm7;
  __m128 Xmm8;
  __m128 Xmm9;
  __m128 Xmm10;
  __m128 Xmm11;
  __m128 Xmm12;
  __m128 Xmm13;
  __m128 Xmm14;
  __m128 Xmm15;
};
} // namespace std
#else
extern "C" {
struct jmp_buf {
  uint64_t Frame;
  uint64_t Rbx;
  uint64_t Rsp;
  uint64_t Rbp;
  uint64_t Rsi;
  uint64_t Rdi;
  uint64_t R12;
  uint64_t R13;
  uint64_t R14;
  uint64_t R15;
  uint64_t Rip;
  uint32_t MxCsr;
  uint16_t FpCsr;
  uint16_t Spare;
  __m128 Xmm6;
  __m128 Xmm7;
  __m128 Xmm8;
  __m128 Xmm9;
  __m128 Xmm10;
  __m128 Xmm11;
  __m128 Xmm12;
  __m128 Xmm13;
  __m128 Xmm14;
  __m128 Xmm15;
};
int __cdecl setjmp(jmp_buf _Buf);
__declspec(noreturn) void __cdecl longjmp(jmp_buf _Buf, int _Value) noexcept(false);
}
export namespace std {
using ::jmp_buf;
using ::longjmp;
using ::setjmp;
}
#endif
#endif
