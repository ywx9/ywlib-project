#pragma once
#include <inc/vcruntime.h>

#ifndef __ywlib_import
extern "C" {
using ptrdiff_t = decltype((int*)0 - (int*)0);
using size_t = decltype(sizeof(int));
using max_align_t = double;
using nullptr_t = decltype(nullptr);
}
export namespace std {
using ::max_align_t;
using ::nullptr_t;
using ::ptrdiff_t;
using ::size_t;

enum class byte : unsigned char {};

template<__ywlib_integral Int> constexpr byte operator<<(byte b, Int shift) noexcept { return byte((unsigned char)(b) << shift); }
template<__ywlib_integral Int> constexpr byte operator>>(byte b, Int shift) noexcept { return byte((unsigned char)(b) >> shift); }
template<__ywlib_integral Int> constexpr byte& operator<<=(byte& b, Int shift) noexcept { return b = b << shift; }
template<__ywlib_integral Int> constexpr byte& operator>>=(byte& b, Int shift) noexcept { return b = b >> shift; }

constexpr byte operator~(byte b) noexcept { return byte(~(unsigned char)(b)); }
constexpr byte operator|(byte l, byte r) noexcept { return byte((unsigned char)(l) | (unsigned char)(r)); }
constexpr byte operator&(byte l, byte r) noexcept { return byte((unsigned char)(l) & (unsigned char)(r)); }
constexpr byte operator^(byte l, byte r) noexcept { return byte((unsigned char)(l) ^ (unsigned char)(r)); }
constexpr byte& operator|=(byte& l, byte r) noexcept { return l = l | r; }
constexpr byte& operator&=(byte& l, byte r) noexcept { return l = l & r; }
constexpr byte& operator^=(byte& l, byte r) noexcept { return l = l ^ r; }
template<__ywlib_integral Int> constexpr Int to_integer(byte b) noexcept { return Int((unsigned char)(b)); }
} // namespace std
#endif
