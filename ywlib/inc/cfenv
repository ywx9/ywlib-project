#pragma once

#define FE_INEXACT 0x1
#define FE_UNDERFLOW 0x2
#define FE_OVERFLOW 0x4
#define FE_DIVBYZERO 0x8
#define FE_INVALID 0x10
#define FE_ALL_EXCEPT 0x1f

#define FE_TONEAREST 0x000
#define FE_DOWNWARD 0x100
#define FE_UPWARD 0x200
#define FE_TOWARDZERO 0x300

#define FE_DEF_ENV (&::_Fenv1)

#ifndef __ywlib_import
extern "C" {
using fexcept_t = unsigned long;
struct fenv_t {
  unsigned long _Fe_ctl, _Fe_stat;
};
export extern __declspec(selectany) const fenv_t _Fenv1{0x3f00003f, 0};
}
export namespace std {
using ::fenv_t;
using ::fexcept_t;
}
#ifndef __ywlib_export
namespace std {
int __cdecl feclearexcept(int _Flags);
int __cdecl fetestexcept(int _Flags);
int __cdecl fegetexceptflag(fexcept_t* _Except, int _TestFlags);
int __cdecl fesetexceptflag(const fexcept_t* _Except, int _SetFlags);
int __cdecl fegetround();
int __cdecl fesetround(int _Round);
int __cdecl fegetenv(fenv_t* _Env);
int __cdecl fesetenv(const fenv_t* _Env);
int __cdecl feholdexcept(fenv_t* _Env);
}
#else
extern "C" {
int __cdecl feclearexcept(int _Flags);
int __cdecl fetestexcept(int _Flags);
int __cdecl fegetexceptflag(fexcept_t* _Except, int _TestFlags);
int __cdecl fesetexceptflag(const fexcept_t* _Except, int _SetFlags);
int __cdecl fegetround();
int __cdecl fesetround(int _Round);
int __cdecl fegetenv(fenv_t* _Env);
int __cdecl fesetenv(const fenv_t* _Env);
int __cdecl feholdexcept(fenv_t* _Env);
}
export namespace std {
using ::feclearexcept;
using ::fegetenv;
using ::fegetexceptflag;
using ::fegetround;
using ::feholdexcept;
using ::fesetenv;
using ::fesetexceptflag;
using ::fesetround;
using ::fetestexcept;
}
#endif
export namespace std {
__pragma(optimize("", off)) inline int __cdecl feraiseexcept(int Except) {
  static struct {
    int except;
    double num, den;
  } const table[] = {{FE_INVALID, 0.0, 0.0}, {FE_DIVBYZERO, 1.0, 0.0}, {FE_OVERFLOW, 1e+300, 1e-300}, {FE_UNDERFLOW, 1e-300, 1e+300}, {FE_INEXACT, 2.0, 3.0}};
  double tmp{};
  (void)tmp;
  if ((Except &= FE_ALL_EXCEPT) == 0) return 0;
  for (int i{}; i < 5; ++i)
    if ((Except & table[i].except) != 0) tmp = table[i].num / table[i].den;
  return 0;
}
__pragma(optimize("", on)) inline int __cdecl feupdateenv(const fenv_t* Env) {
  int Except = fetestexcept(FE_ALL_EXCEPT);
  return fesetenv(Env) != 0 || feraiseexcept(Except) != 0;
}
} // namespace std
#endif
